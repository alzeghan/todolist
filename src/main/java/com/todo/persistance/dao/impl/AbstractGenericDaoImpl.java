package com.todo.persistance.dao.impl;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.hibernate.Hibernate;
import org.hibernate.Session;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.todo.persistance.dao.GenericDao;



public abstract class AbstractGenericDaoImpl<T, ID extends Serializable> implements GenericDao<T, ID> {

	@PersistenceContext
	private EntityManager entityManager;

	private Class<T> entityClass;

	private String entityClassName;

	public AbstractGenericDaoImpl() {
		Type genericSuperclass;
		Class<?> parametrizedClass = getClass();
		do {
			genericSuperclass = parametrizedClass.getGenericSuperclass();
			if (genericSuperclass instanceof Class) {
				parametrizedClass = (Class<?>) genericSuperclass;
			}
		} while (genericSuperclass != null && !(genericSuperclass instanceof ParameterizedType));
		this.entityClass = (Class<T>) ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];
		if (entityClass != null) {
			entityClassName = entityClass.getSimpleName();
		}
	}

	public EntityManager getEntityManager() {
		// entityManager.setFlushMode(FlushModeType.COMMIT);
		return entityManager;
	}

	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	
	public void delete(T entity) {
		this.beforeDelete(entity);
		entityManager.remove(entity);
	}

	
	public void delete(ID entityId) {
		Object entity = entityManager.find(entityClass, entityId);
		this.beforeDelete((T) entity);
		entityManager.remove(entity);
	}

	
	public void deleteAll(Collection<T> entities) {
		for (T entity : entities) {
			this.beforeDelete(entity);
			entityManager.remove(entity);
		}
	}

	
	public T findByPrimaryKey(ID primaryKey) {
		return (T) entityManager.find(entityClass, primaryKey);
	}

	
	public List<T> findAll() {
		return entityManager.createQuery("SELECT e FROM " + entityClassName + " e").getResultList();
	}

	
	public void save(T entity) {
		this.beforeSave(entity);
		setAutoGeneratedValues(entity);
		entityManager.persist(entity);
	}

	
	public T update(T entity) {
		this.beforeUpdate(entity);
		return entityManager.merge(entity);
	}

	
	public void saveOrUpdate(T entity) {
		Object id = entityManager.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(entity);
		if (id == null) {
			this.beforeSave(entity);
			setAutoGeneratedValues(entity);
			entityManager.persist(entity);
		} else {
			this.beforeUpdate(entity);
			entityManager.merge(entity);
		}
	}

	
	public void saveOrUpdateAll(Collection<T> entities) {
		for (T entity : entities) {
			Object id = entityManager.getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(entity);
			if (id == null) {
				this.beforeSave(entity);
				setAutoGeneratedValues(entity);
				entityManager.persist(entity);
			} else {
				this.beforeUpdate(entity);
				entityManager.merge(entity);
			}
		}
	}

	@Transactional(propagation = Propagation.MANDATORY)
	public void initProxy(Object proxy) {
		Hibernate.initialize(proxy);
	}

	public Class<T> getEntityClass() {
		return entityClass;
	}

	// public MatchMode getMatchMode(String matchMode) {
	// if (matchMode == null || matchMode.trim().length() == 0) {
	// return MatchMode.ANYWHERE;
	// }
	// matchMode = matchMode.toUpperCase();
	// if (MatchMode.EXACT.equals(matchMode)) {
	// return MatchMode.EXACT;
	// }
	// if (MatchMode.END.equals(matchMode)) {
	// return MatchMode.END;
	// }
	// if (MatchMode.START.equals(matchMode)) {
	// return MatchMode.START;
	// } else {
	// return MatchMode.ANYWHERE;
	// }
	// }
	
	public T findByKey(final String key, final String value) {
		EntityManager em = getEntityManager();
		Query query = em.createQuery("from " + entityClassName + " e where e." + key + " = :val");
		query.setMaxResults(1);
		query.setParameter("val", value);
		List result = query.getResultList();
		if (!result.isEmpty()) {
			return (T) result.get(0);
		}
		return null;
	}

	public List<T> findByKeyMultipleResults(final String fieldName, final Object value) {
		EntityManager em = getEntityManager();
		Query query = em.createQuery("from " + entityClassName + " e where e." + fieldName + " = :value");
		query.setParameter("value", value);
		return query.getResultList();
	}

	public List<T> findAllByKeyList(final String key, final List<String> values) {
		EntityManager em = getEntityManager();
		Query query = em.createQuery("from " + entityClassName + " e where e." + key + " in :vals");
		query.setParameter("vals", values);
		return query.getResultList();
	}

	public T findByKeyEqualsIgnoreCase(final String key, final String value) {
		EntityManager em = getEntityManager();
		Query query = em.createQuery("from " + entityClassName + " e where LOWER(e." + key + ") = :val");
		query.setMaxResults(1);
		query.setParameter("val", value.toLowerCase());
		List result = query.getResultList();
		if (!result.isEmpty()) {
			return (T) result.get(0);
		}
		return null;
	}

	protected void beforeSave(T entity) {
		// Nothing doing here, this is for any overwriting at the concrete level.
	}

	protected void beforeUpdate(T entity) {
		// Nothing doing here, this is for any overwriting at the concrete level.
	}

	protected void beforeDelete(T entity) {
		// Nothing doing here, this is for any overwriting at the concrete level.
	}

	public void setAutoGeneratedValues(final T entity) {

	}
	
	Session getSession(){
		Session session = entityManager.unwrap(Session.class);
		return session;
	}

}
